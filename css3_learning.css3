learning css3

contents

tag{} is for heading

#{} is for subsection

.{} is for more subsectinon

:{} is for more subsection

@{} are tips



addi ass a css property is when you dont know how to descible what yr learning


https://tympanus.net/codrops/css_reference/grid/


css grid{}



#concepts{
    document-dirrection: HTML document.dir is from ltr if we change to rtl layout assignments get affected like flexbox we have the grid container and grid items
}

#grid-Lines{
    desc: hoz and ver lines for grid structure basis, refered by numerical index which starts at 1
    negative index: to accss the last grid item up use -1

    file:simpleGrid.html
    use the element selector to see how the grid is working
    
    @{}its responsive to a point so you have to be smart when working with this

    
}


.grid-Lines-Naming{
    
    naming: can be down in grid-template-columns & grid-template-rows property
    file:namedGridLines.html
    
    @{} when it have the same grid line naming twice grid API matches the first item it sees
}


#grid-Tracks-And-Cells{
    grid-Track: the space between 2 adjacent lines, aka rows n columns,
    seperating-Grid-Track: with grid-row-gap and grid-column-gap properties
    grid-Cell: space btwn 2 adj row and column
    
    
}

#grid-Areas{
    
    def: made of 1 more or cells, you can refer to it with a grid-template-areas property then it can be refered using grid-areas property
    
    file:gridAreas.html
     @{} a grid gutter is any gap betwen cells and tracks and areas are grid row gutters
}



grid container defining grid sturcture{
    formatting context: ONLY APPLIES TO CHILD ELEMENTS nothing beyong
    
    file:noGrandKids.html

}

#ExplicitAndImplicitGrid{
    
    explicit-def: what you define using css templates
    implicit-def: if something exceeds the range the browser will create an implicit grid to help you out use
            grid-auto to deal with implicit columns
    file: explicitAndImplicit.html
    
    
    @{ } the tracks that are not  explicitly  filled are implicitly  filled
}

#Grid-Container-Properties{}

.grid-template-columns-rows{
    
    signature :     grid-template-colums:  none | <track-list> | <auto-track-list>
                    grid-template-rows:  none | <track-list> | <auto-track-list>
    none:           no explicit grid tracks are created
    <track-list>:   specify size of each grid track
                        [ <line-names>? [ <track-size> | <track-repeat> ]  ]+ <line-names>?
 
    <track-size>: 3 ways to define
    
    :track-breadth{} : a CSS length px % em
                        flexible length fr  a portion of the remaining free space with the flex factor
                        keywords
                min-content: smallest szie possible no overlfow
                max-content: minimun size to fit content
                
    
    
    :minmax{} :  <inflexible-breadth> , <track-breadth>
                a range defined by the minmax fn, where first value is min and 2nd is maximun
    @{} to use minmax minmax(75px,120px)
    
    :fit-content( length-percentage)
    
    <track-repeat>: we have repeating track size done with repeat()
    
    signature: repeat ( [<positive-integer> ], [ <line-names>? <track-size> ]+ <line-names>? )
    
    pattern: 30px narrow column n 100px wide column repeated 4 times
    
    ex1: 30px 100px 30px 100px 30px 100px 30px 100px
    ex2: repeat(4, 30px 100px)
    
    
    file:trackBreadth1.html
    
    <line-names> : for creating complicated webapp grids
    refer to namedGridLines.html
    
    
    
    
    <auto-track-list> optional
    signautre [ <line-names>?   [ <fixed-size> | <fixed-repeat> ] ]* <line-names>? <auto-repeat>
    
    
    <fixed-size>
    
    <fixed-breadth> any css length
    minmax
    
    @{} if you have a problem with using a value, the fn probably does not like its type
    
    <fixed-repeat>
     signature: repeat ( [<positive-integer> ], [ <line-names>? <track-size> ]+ <line-names>? )
     
     
    <auto-repeat>
    signature : repeat( [auto-fill | auto-fit] , [ <line-names>? <fixed-size> ]+ <line-names>? )
    
    auto-fill: generate as many columns to fit availble space  without causing grid to overflow
    auto-fit: above + collapse any empty repeated tracks which means size is 0px
    
    
}

.grid-template-area{
    
    signauture:
    none | <string>+
    
    :none: no named grid areas or grid tracks
    
    :<string>+ :  each word or char creats a column each seperate string creates a row
        then assign css to the grid area items
    file:gridTemplateArea.html
    
}



.grid-template {
    
    grid-template:  shorthand for declairing tempalte columns rows and areas
    signature      : none | [ <'grid-template-rows'> / <'grid-template-colums'> | <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list> ] ]
    you can use   <'grid-template-rows'> / <'grid-template-colums'> or
     <line-names>? <string> <track-size>? <line-names>? ]+ [ / <explicit-track-list>
     
     ex
        grid-template : [header-top] "a a a" [header-bottom][main-top] "b b b" 1fr [main-bottom] / auto 1fr auto;
       
        grid-template-areas: "a a a"
                            "b b b";
        grid-template-rows:[header-top] auto [header-bottom main-top] 1fr [main-bottom]
        grid-template-columns: auto 1fr auto:
        
    file:gridTemplate.html
    
}


.grid-gap{
    
    grid-gap: grid-column-gap and grid-row-gap css lengths
    desc:  the space between grid tracks the never appper at the edge of the grid
    file:gridGap.html
    
    grid-gap : shorthand
    signature : <'grid-row-gap'> <'grid-column-gap'>
    
}

.grid-auto{
    
    grid-auto-columns:  <track-size>+
    grid-auto-rows:  <track-size>+
    see above
    
    grid-auto-flow:[ row | column ] | dense
    row: extends the grid to fill more rows
    column: extends grid to fill columms
    dense: the algorithm will attempt to fit small grid items  that appear later eariler in the grid, getting rid of holes
    
    file:gridAuto.html
    
}


.grid{
    
    signature: <'grid-template'> | <'grid-template-rows'> / [auto-flow && dense? ] <'grid-auto-columns'>? | [auto-flow && dense? ] <'grid-auto-rows'>? / <'grid-template-columns'>
    desc: shorthand that sets all explicit and implicit grid pros in a single declaration and destroys any gutter properites
    it affects
    
    grid-template-rows:none
    grid-template-columns:none
    grid-template-areas:none
    grid-auto-rows: auto
    grid-auto-columns: auto
    grid-auto-flow: row
    grid-column-gap: 0
    grid-row-gap: 0
    
    
    <'grid-template-rows'> / [auto-flow && dense? ] <'grid-auto-columns'>?
    explicitly set grid row tracks, implicity for auto-repeat for grid column
    
    @{ } when you remove the grid-auto-columns in the 2nd signaure, the the default is auto
    
    file gridLoneProperty.html
    
}


#Grid-Items-Placing-Items-in-the-Grid{
    
    synopsis:  where a grid item ends up depends on position and span
    position: location on grid, set by CSS or auto-placement;
    span: determines how many tracks an item will take default is the same as a grid cell
    how-browser-does-it: 'grid-row-start' line
                         'grid-row-end' line
                         'row span'
                         'grid-column-start' line
                         'grid-column-end 'line
                         'grid-column span'
    @{} you just need 2 from column or row for the browser to imply the 3rd
    
    @{} 1 / span 2; is to have the column or row start at a certain range
    
    common-sense: it will swap if end is less than start,
                    ignore any span after the first,
                    named line spans will be treated as span 1
                    
    file:gridItemPosition.html
                        
}

.Ordering-Grid-Items{
    order: if they are explicitly specified grid items are going to go somewhere;
    source-order: when we didnt have grid we needed this
    
    @{} site advice, try to get main content first, although there are site contents later
    
    advantages: with CSS Grid we can do more
    
    ex:
    <body>
      <header>...</header>
      <main>...</main>
      <nav>...</nav>
      <aside>...</aside>
      <footer>...</footer>
    </body>
    
    with css grid, source order doesnt matter, element go where they are supposed to go
    
    order: only visual order is affected, speech and hotkeys still follow document source order
}

.Overlapping-Grid-Items{
    
    features: multiple items can be put in the same container
    z-index: no z-index last on top , and on default they cascade horizontally;
    
    
    
    other css: using justify-self align self and z-index we can make cool effects
    
    @{} for d e f change the z-index to see the reactions
    file:overlapGrid.html
}


.Absolutely-Positioned-Grid-Items{
    position : you want to use position:relative; so the grid can be in control of placement
    position : when this is absolute, it means that the element might not fill up grid cells;
}



#Properties-Related-to-Grid-Items{
    grid-column-start: auto | <custom-ident> | [ <integer> && <custom-ident>? ] | [ span && [ <integer> || <custom-ident> ] ]
    grid-column-end: auto | <custom-ident> | [ <integer> && <custom-ident>? ] | [ span && [ <integer> || <custom-ident> ] ]
    grid-row-start: auto | <custom-ident> | [ <integer> && <custom-ident>? ] | [ span && [ <integer> || <custom-ident> ] ]
    grid-row-end: auto | <custom-ident> | [ <integer> && <custom-ident>? ] | [ span && [ <integer> || <custom-ident> ] ]
    
    
    auto: default span of 1 placed to fill up the grid
    <custom-ident> : numerical index of grid line or a named grid line
    [ <custom-ident>? ] :  just a name for a line
    [ <integer> && <custom-ident>? ]  : so grids can have areas where naming is repeeated so like every 2 u have foo and bar to deal with it a grid of 6 rows,  when you use this signauter, everywhere in the grid can be rerefend as [num] [name] and so on, cannot start at 0
    
    @{} remember to name the in the tempalte first
    
    [ span && [ <positive-integer> || <custom-ident> ] ] : allows for span then choose how large it will be interger defualt is one
    file:gridItemProperties.html
}


.grid-row.grid-column{
    desc: short hand for start and end
    signature:  <grid-line> [ / <grid-line> ]?
    
    
}

.grid-area{
    desc: short hand for all 4 start and end
    signature:  grid-area: <grid-line> [ / <grid-line> ]{0,3}
    
    row-start column-start row-end column-end
    file: gridAreaPlacement.html
}

#Grid-Alignment{
    direction: the text flow is from left to right the visual block-view is from top to bottom;
    column-axis:  the block-axis
    row-axis: text-axis
    
    it depends on the writing-mode property
    file:gridAlignment.html
    
}

#Properties-Grid-Alignment{}

.justify-content{
    
    @{} assunming a horizontal-tb position
    
    signature: justify-content: center | start | end | space-between | space-around | space-evenly
    
    center:         Centers the grid within the grid container along the row-axis
    start :         moves grid to start of the container
    end   :         moves grid to end of container
    space-around:   each grid track has equal space around it, but a half space at th edges
    space-between:  distributes evenly first row on left edge and last at the right edge
    @{} if the spacing is too small, then act like a regular grid
    space-evenly:   makes sure that everything has equal spacing
    
    file:justifyContent.html
}

.align-content{
    
    signature :     center | start | end | space-between | space-around | space-evenly
    problem:        sometime things dont look right
    does same thing as justify-content but in the y-axis
    
    
    
}


.justify-items{
    signature :  center | start | end | stretch
    strectch  :  fills grid items
    center    :  justfies to center of grid area
    start     :  moves to front
    end       :  moves to back
    
    @{} this acutally goes in the grid container
    
    
    file:justify-items.html
}


.align-items{
    
    @{}  same as justify-items but vertical
    @{} goes in the grid contaier
    
    
    
}


.justify-self{
    signature : center | start | end | stretch
    
    stretch: fills grid area width
    center:  aligns content in center
    start :  puts left axis
    end :    puts at right axis
    
    @{ } so unless the grid items have a size the other 3 items are useless
    
    file:justifySelf.html
}

.align-self{
    signature: center | start | end | stretch
    
    same as above but in the y-axis
}



#A-Responsive-App-Using-Grid{
    
    file:responsiveGridApp.html
}

#Support{
    
    @the grids in IE10 && IE11 were added to early some features may not work
}

.desktop{
    chrome:58;
    firefox: 54;
    IE : no
    edge: 16;
    Opera: 44
    Safari: 10
    
    
    @{} firefox  From version 40 until version 59 (exclusive): this feature is behind the layout.css.grid.enabled preference (needs to be set to true). To change preferences in Firefox, visit about:config.
    
    @{} chrome mobile  From version 40 until version 59 (exclusive): this feature is behind the layout.css.grid.enabled preference (needs to be set to true). To change preferences in Firefox, visit about:config.
    
    @{}  From version 28: this feature is behind the Enable experimental Web Platform features preference.
    
}

.mobile:{
    
    apple:10
    andriod: 67
    Opera: no
    Chrome: 75
    Firefox: 67
}



#Takeaways{
    everything always starts with 1
}


https://tympanus.net/codrops/css_reference/flexbox/


css flexbox{
    
    synopsis: there are 4 layouts
                block  :    designed for laying out documents, and that lays elements on a page vertically
                inline :    text horizontally inside block-level container
                table  :    2d data in a tabular format
                positioned: explicit position without regard to other document structures
                
    flexbox: similar to block lauyout has more flexibility for distributing space that complex apps need
                very adaptive stuff
                can change visual order without changing source order
}


#A-Flexible-Container{
    start: make a flex container
    
    ex:
        .flex-container {
            display: flex;
        }
        /* or */
        .flex-container {
            display: inline-flex;
        }
    
    @{} no elements outside a flexbox are affected by it, affected only by direct descendants
}

#Concepts-and-Terminology{
    flex-axis:items will be placed in the main axis or cross axis
    
    main-axis: where your flex items go it extends in the main direction
    placed in main-start side and head toward main end side
    main-size: the length that is the main dimension
    cross-axis: axis perpendencular to the main
    flex-lines:filled with items start on cross-start. cross-end
    
    @{}if u dont understand go over the section agagin
    
    
}



#Flex-Lines{
    depends on flex-wrap proper
    single-line: puts all children in one line even though it might overflow
    multi-line : works like word wrap;
    
}

#Writing-Modes{

}


#Flexbox Properties: Flex Container {
    flex-direction
    signature:  row | row-reverse | column | column-revers
    specifies how  flex items are placed
    row:  horizontal left to right
    row-reverse :  horizontal right to left
    column :   vertical left to right
    column-reverse : vertical right to left;
    
    @{} paint speech and sequential order are not affects
    
    flex items will remain on that single line even if they overflow the line
    
}

.flex-wrap{
    signature: nowrap | wrap | wrap-reverse
    nowrap:       all items are laid out on the flex line
    wrap:         flex items will wrap onto additional flex lines
    wrap-reverse :same as wrap but its all reverse
    
    file flexDirection.html
    
    @{} so wrap is from top left down wrap-reverse is bottom left up
}


.flex-flow{
    signature:  <'flex-direction'> <'flex-wrap'>
    desc: short for setting flex flow and flex property
    
    @ in english the same parameters can have 2 different values
}

.justify-content{
    signature: flex-start | flex-end | center | space-between | space-around
    flex-start    : default flex values are packed to the start of the  line
    flex-end      : packed toward the end of the line
    center        : everything packed to center with starts and end packed all to the middle
    space-between :flex items are evenly distributed in the line, if there is one the val is equal to flex-start
    space-around  :half sized spaces on either end, if theres one the val is equal to center
    
    file:flexjustifyContent.html
}
              
                
.align-items{
    desc:        align-items in the cross-axis
    flex-start:  items are packed towards  cross start
    flex-end:    packed towards cross end
    center :     packed toward center of line
    baseline :   aligned such that bases of the text align
    stretch:     items go from cross start to cross end
    
    file: flexAlignItems.html
}


.align-content{
    signature: flex-start | flex-end | center | space-between | space-around | stretch
    flex-start:eveything sent to cross axis top
    flex-end:  sent to cross axis bottom;
    center:everything  sent to the vertical of the container
    space-between: flex items are evenly distrubted, with one snug to the top and another sng to the bottom
    space-around:  same as last time but only haplp spaces;
    stretch: default lines stretrch to take the remaining space if the value is not side of the flex item it eqals to flex start however new cross axis begin by how many are generated and they start at (x/flexboLength)/flexBoxLEngth
    file:flexAlignContent.html
    
}

#Flex-Items-Properties{
    order: every item gets 0, if someone gets 1 they are put after everthing;
            its document order than source order 1st
        screen readers dont take acct for this
        
    @{} they go in the flex item properties
}

.align-self{
    signature: auto | flex-start | flex-end | center | baseline | stretch
    auto: default, based on align-items prop
    flex-start :item goes to cross-start of the line
    flex-end:   item goes to cross-end
    center:    The flex item’s margin box is centered in the cross axis within the line
    baseline: a lot of cool stuff
    stretch:its stretch from cross-start to cross-end while respecting the constranints of min-height min-width
    file:flexAlignSelf.html;
}

.flex-grow{
    signature: <number>
    desc: bascially  you control how much an item can grow in realtion to the other items in the main-axis, it goes by a proprotion
    and they all grow relative to one another
    file: flexGrow.html
}

.flex-shrink{
    signature:
    shrink flex items in relation one to another
    file: flexShrink.html
    @{} when the items are too big you can actually break the flex container
}

.flex-basis{
    desc: controls the width of single flex-items before they grow or shrink
    @{} this can break also
    signature : auto | <'width'>
                
}

.flex{
    signature none | [ <'flex-grow'> <'flex-shrink'>? || <'flex-basis'> ]
    default :   0 auto / flex: initial
    auto : 1 1 auto, the flex items absorb any free space
    <positive-number>:  flex: <positive-number> 1 0%, make items flexible and set flex basis to 0
    
}


@{} by default flex items wont shrink beyond min-size which is the length of the longest word, to change set the min-width or min-height property

#Compatability-Table{}

.Desktop{
    chrome:29
    firefox:28
    ie: 11 /partial Support
    opera:12
    safari: 9
}

.mobile{
    apple 9.0
    andriod 4.4
    opera:all
    chrome:75;
    firefox:76
}




https://tachyons.io/


tachyions{}

#version{} 4.10.0


#to-use{
    css import : <link rel="stylesheet" href="https://unpkg.com/tachyons@4.10.0/css/tachyons.min.css"/>
    npm:  npm install --save-dev tachyons@4.10.0
    build from source:
        git clone git@github.com:tachyons-css/tachyons.git
        cd tachyons
        npm install && npm start
}



#TYPE-SCALE{
    advice: have a limit set of font sizes dont have too many
       Base:
    f = font-size

   Modifiers
     1 = 1st step in size scale
     2 = 2nd step in size scale
     3 = 3rd step in size scale
     4 = 4th step in size scale
     5 = 5th step in size scale
     6 = 6th step in size scale
     7 = 7th step in size scale

   Media Query Extensions:
     -ns = not-small
     -m  = medium
     -l  = large
    */
    
    /*
     * For Hero/Marketing Titles
     *
     * These generally are too large for mobile
     * so be careful using them on smaller screens.
     * */
    
    .f-6,
    .f-headline {
      font-size: 6rem;
    }
    .f-5,
    .f-subheadline {
      font-size: 5rem;
    }
    
    
    /* Type Scale */
    
    .f1 { font-size: 3rem; }
    .f2 { font-size: 2.25rem; }
    .f3 { font-size: 1.5rem; }
    .f4 { font-size: 1.25rem; }
    .f5 { font-size: 1rem; }
    .f6 { font-size: .875rem; }
    .f7 { font-size: .75rem; } /* Small and hard to read for many people so use with extreme caution */
    
    @media (--breakpoint-not-small){
      .f-6-ns,
      .f-headline-ns { font-size: 6rem; }
      .f-5-ns,
      .f-subheadline-ns { font-size: 5rem; }
      .f1-ns { font-size: 3rem; }
      .f2-ns { font-size: 2.25rem; }
      .f3-ns { font-size: 1.5rem; }
      .f4-ns { font-size: 1.25rem; }
      .f5-ns { font-size: 1rem; }
      .f6-ns { font-size: .875rem; }
      .f7-ns { font-size: .75rem; }
    }
    
    @media (--breakpoint-medium) {
      .f-6-m,
      .f-headline-m { font-size: 6rem; }
      .f-5-m,
      .f-subheadline-m { font-size: 5rem; }
      .f1-m { font-size: 3rem; }
      .f2-m { font-size: 2.25rem; }
      .f3-m { font-size: 1.5rem; }
      .f4-m { font-size: 1.25rem; }
      .f5-m { font-size: 1rem; }
      .f6-m { font-size: .875rem; }
      .f7-m { font-size: .75rem; }
    }
    
    @media (--breakpoint-large) {
      .f-6-l,
      .f-headline-l {
        font-size: 6rem;
      }
      .f-5-l,
      .f-subheadline-l {
        font-size: 5rem;
      }
      .f1-l { font-size: 3rem; }
      .f2-l { font-size: 2.25rem; }
      .f3-l { font-size: 1.5rem; }
      .f4-l { font-size: 1.25rem; }
      .f5-l { font-size: 1rem; }
      .f6-l { font-size: .875rem; }
      .f7-l { font-size: .75rem; }
    }

}


#TYPOGRAPHY{
  
    deals with word wrapping
/*

   TYPOGRAPHY
   http://tachyons.io/docs/typography/measure/

   Media Query Extensions:
     -ns = not-small
     -m  = medium
     -l  = large

*/



/* Measure is limited to ~66 characters */
.measure {
  max-width: 30em;
}

/* Measure is limited to ~80 characters */
.measure-wide {
  max-width: 34em;
}

/* Measure is limited to ~45 characters */
.measure-narrow {
  max-width: 20em;
}

/* Book paragraph style - paragraphs are indented with no vertical spacing. */
.indent {
  text-indent: 1em;
  margin-top: 0;
  margin-bottom: 0;
}

.small-caps {
  font-variant: small-caps;
}

/* Combine this class with a width to truncate text (or just leave as is to truncate at width of containing element. */

.truncate {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@media (--breakpoint-not-small) {
  .measure-ns  {
    max-width: 30em;
  }
  .measure-wide-ns {
    max-width: 34em;
  }
  .measure-narrow-ns {
    max-width: 20em;
  }
  .indent-ns {
    text-indent: 1em;
    margin-top: 0;
    margin-bottom: 0;
  }
  .small-caps-ns {
    font-variant: small-caps;
  }
  .truncate-ns {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
}

@media (--breakpoint-medium) {
  .measure-m {
    max-width: 30em;
  }
  .measure-wide-m {
    max-width: 34em;
  }
  .measure-narrow-m {
    max-width: 20em;
  }
  .indent-m {
    text-indent: 1em;
    margin-top: 0;
    margin-bottom: 0;
  }
  .small-caps-m {
    font-variant: small-caps;
  }
  .truncate-m {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
}

@media (--breakpoint-large) {
  .measure-l {
    max-width: 30em;
  }
  .measure-wide-l {
    max-width: 34em;
  }
  .measure-narrow-l {
    max-width: 20em;
  }
  .indent-l {
    text-indent: 1em;
    margin-top: 0;
    margin-bottom: 0;
  }
  .small-caps-l {
    font-variant: small-caps;
  }
  .truncate-l {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
}
}



#line-height{
    
    def: is a css property
    line-height helps to read values that would otherwise be very tough to read
    
    
/*

   LINE HEIGHT / LEADING
   Docs: http://tachyons.io/docs/typography/line-height

   Media Query Extensions:
     -ns = not-small
     -m  = medium
     -l  = large

*/

  .lh-solid { line-height: 1; }
  .lh-title { line-height: 1.25; }
  .lh-copy  { line-height: 1.5; }

@media (--breakpoint-not-small) {
  .lh-solid-ns { line-height: 1; }
  .lh-title-ns { line-height: 1.25; }
  .lh-copy-ns  { line-height: 1.5; }
}

@media (--breakpoint-medium) {
  .lh-solid-m { line-height: 1; }
  .lh-title-m { line-height: 1.25; }
  .lh-copy-m  { line-height: 1.5; }
}

@media (--breakpoint-large) {
  .lh-solid-l { line-height: 1; }
  .lh-title-l { line-height: 1.25; }
  .lh-copy-l  { line-height: 1.5; }
}
    
}

#tracking{
    def: this deals with letter spacing
    /*
    
       LETTER SPACING
       Docs: http://tachyons.io/docs/typography/tracking/
    
       Media Query Extensions:
         -ns = not-small
         -m  = medium
         -l  = large
    
    */
    
    .tracked       { letter-spacing:  .1em; }
    .tracked-tight { letter-spacing: -.05em; }
    .tracked-mega  { letter-spacing:  .25em; }
    
    @media (--breakpoint-not-small) {
      .tracked-ns       { letter-spacing:  .1em; }
      .tracked-tight-ns { letter-spacing: -.05em; }
      .tracked-mega-ns  { letter-spacing:  .25em; }
    }
    
    @media (--breakpoint-medium) {
      .tracked-m       { letter-spacing:  .1em; }
      .tracked-tight-m { letter-spacing: -.05em; }
      .tracked-mega-m  { letter-spacing:  .25em; }
    }
    
    @media (--breakpoint-large) {
      .tracked-l       { letter-spacing:  .1em; }
      .tracked-tight-l { letter-spacing: -.05em; }
      .tracked-mega-l  { letter-spacing:  .25em; }
    }

        
}


#font-weight{
    @{} Use bold weights sparingly. Font-weight should decrease as font-size increases.
    
       FONT WEIGHT
   Docs: http://tachyons.io/docs/typography/font-weight/

   Base
     fw = font-weight

   Modifiers:
     1 = literal value 100
     2 = literal value 200
     3 = literal value 300
     4 = literal value 400
     5 = literal value 500
     6 = literal value 600
     7 = literal value 700
     8 = literal value 800
     9 = literal value 900

   Media Query Extensions:
     -ns = not-small
     -m  = medium
     -l  = large

*/

.normal { font-weight: normal; }
.b      { font-weight: bold; }
.fw1    { font-weight: 100; }
.fw2    { font-weight: 200; }
.fw3    { font-weight: 300; }
.fw4    { font-weight: 400; }
.fw5    { font-weight: 500; }
.fw6    { font-weight: 600; }
.fw7    { font-weight: 700; }
.fw8    { font-weight: 800; }
.fw9    { font-weight: 900; }


@media (--breakpoint-not-small) {
  .normal-ns { font-weight: normal; }
  .b-ns      { font-weight: bold; }
  .fw1-ns    { font-weight: 100; }
  .fw2-ns    { font-weight: 200; }
  .fw3-ns    { font-weight: 300; }
  .fw4-ns    { font-weight: 400; }
  .fw5-ns    { font-weight: 500; }
  .fw6-ns    { font-weight: 600; }
  .fw7-ns    { font-weight: 700; }
  .fw8-ns    { font-weight: 800; }
  .fw9-ns    { font-weight: 900; }
}

@media (--breakpoint-medium) {
  .normal-m { font-weight: normal; }
  .b-m      { font-weight: bold; }
  .fw1-m    { font-weight: 100; }
  .fw2-m    { font-weight: 200; }
  .fw3-m    { font-weight: 300; }
  .fw4-m    { font-weight: 400; }
  .fw5-m    { font-weight: 500; }
  .fw6-m    { font-weight: 600; }
  .fw7-m    { font-weight: 700; }
  .fw8-m    { font-weight: 800; }
  .fw9-m    { font-weight: 900; }
}

@media (--breakpoint-large) {
  .normal-l { font-weight: normal; }
  .b-l      { font-weight: bold; }
  .fw1-l    { font-weight: 100; }
  .fw2-l    { font-weight: 200; }
  .fw3-l    { font-weight: 300; }
  .fw4-l    { font-weight: 400; }
  .fw5-l    { font-weight: 500; }
  .fw6-l    { font-weight: 600; }
  .fw7-l    { font-weight: 700; }
  .fw8-l    { font-weight: 800; }
  .fw9-l    { font-weight: 900; }
}



}



#font-style{
    /*

   FONT STYLE
   Docs: http://tachyons.io/docs/typography/font-style/

   Media Query Extensions:
     -ns = not-small
     -m  = medium
     -l  = large

*/

.i         { font-style: italic; }
.fs-normal { font-style: normal; }

@media (--breakpoint-not-small) {
  .i-ns       { font-style: italic; }
  .fs-normal-ns     { font-style: normal; }
}

@media (--breakpoint-medium) {
  .i-m       { font-style: italic; }
  .fs-normal-m     { font-style: normal; }
}

@media (--breakpoint-large) {
  .i-l       { font-style: italic; }
  .fs-normal-l     { font-style: normal; }
}


}


#vertical-algin{
    
    @{} donest work dont use, css grid has it own for this type of problem
    /*
    
       VERTICAL ALIGN
    
       Media Query Extensions:
         -ns = not-small
         -m  = medium
         -l  = large
    
    */
    
    .v-base     { vertical-align: baseline; }
    .v-mid      { vertical-align: middle; }
    .v-top      { vertical-align: top; }
    .v-btm      { vertical-align: bottom; }
    
    @media (--breakpoint-not-small) {
      .v-base-ns     { vertical-align: baseline; }
      .v-mid-ns      { vertical-align: middle; }
      .v-top-ns      { vertical-align: top; }
      .v-btm-ns      { vertical-align: bottom; }
    }
    
    @media (--breakpoint-medium) {
      .v-base-m     { vertical-align: baseline; }
      .v-mid-m      { vertical-align: middle; }
      .v-top-m      { vertical-align: top; }
      .v-btm-m      { vertical-align: bottom; }
    }
    
    @media (--breakpoint-large) {
      .v-base-l     { vertical-align: baseline; }
      .v-mid-l      { vertical-align: middle; }
      .v-top-l      { vertical-align: top; }
      .v-btm-l      { vertical-align: bottom; }
    }
}


#text-align{
    
}